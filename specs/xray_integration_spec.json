{
  "metadata": {
    "generated_at": "2025-05-22T19:42:15.069545",
    "version": "1.0.0",
    "target_core": "xray-core",
    "source_analysis": "hiddify-app-v2.5.7"
  },
  "dependency_changes": {
    "remove_dependencies": [
      {
        "group_id": "io.github.sagernet",
        "artifact_id": "sing-box-core",
        "reason": "Replaced by Xray core",
        "files_to_modify": [
          "app/build.gradle",
          "app/build.gradle.kts"
        ]
      },
      {
        "group_id": "io.github.sagernet",
        "artifact_id": "sing-box-jni",
        "reason": "Native interface replaced by Xray JNI",
        "files_to_modify": [
          "app/build.gradle",
          "app/build.gradle.kts"
        ]
      },
      {
        "group_id": "io.github.sagernet",
        "artifact_id": "libbox-jni",
        "reason": "Core library interface replaced",
        "files_to_modify": [
          "app/build.gradle",
          "app/build.gradle.kts"
        ]
      }
    ],
    "add_dependencies": [
      {
        "group_id": "com.github.2dust",
        "artifact_id": "xray-core",
        "version": "latest.release",
        "scope": "providedRuntime",
        "reason": "Xray core integration",
        "configuration": {
          "exclude_transitive": true,
          "native_libs_only": true
        }
      }
    ],
    "gradle_changes": {
      "app/build.gradle": {
        "android_block": {
          "packagingOptions": {
            "jniLibs": {
              "useLegacyPackaging": true
            }
          },
          "splits": {
            "abi": {
              "enable": true,
              "reset": true,
              "include": [
                "arm64-v8a",
                "armeabi-v7a",
                "x86_64"
              ]
            }
          }
        }
      }
    }
  },
  "native_libraries": {
    "required_libraries": {
      "libxray.so": {
        "description": "Xray core native library",
        "architectures": [
          "arm64-v8a",
          "armeabi-v7a",
          "x86_64"
        ],
        "source": "https://github.com/XTLS/Xray-core/releases",
        "build_requirements": {
          "go_version": ">=1.19",
          "ndk_version": ">=23.0.7599858",
          "cgo_enabled": "1"
        }
      }
    },
    "jni_libs_structure": {
      "src/main/jniLibs/": {
        "arm64-v8a/": {
          "libxray.so": "ARM64 native library"
        },
        "armeabi-v7a/": {
          "libxray.so": "ARM32 native library"
        },
        "x86_64/": {
          "libxray.so": "x86_64 native library for emulator"
        }
      }
    },
    "build_instructions": {
      "manual_build": [
        "git clone https://github.com/XTLS/Xray-core.git",
        "cd Xray-core",
        "export ANDROID_NDK_HOME=/path/to/ndk",
        "make android-arm64",
        "make android-arm32",
        "make android-x64"
      ],
      "download_prebuilt": [
        "Download from Xray-core releases",
        "Extract libxray.so for each architecture",
        "Place in appropriate jniLibs subdirectories"
      ]
    },
    "integration_notes": [
      "Native libraries must be downloaded separately",
      "Verify SHA256 checksums before integration",
      "Test on physical devices for each architecture",
      "Consider library size impact on APK"
    ]
  },
  "jni_interface": {
    "kotlin_interface": {
      "package": "net.marfanet.xray",
      "main_class": "XrayCore",
      "methods": [
        {
          "name": "init",
          "signature": "(): Boolean",
          "description": "Initialize Xray core",
          "native_method": "nativeInit"
        },
        {
          "name": "start",
          "signature": "(config: String): Boolean",
          "description": "Start Xray with configuration",
          "native_method": "nativeStart"
        },
        {
          "name": "stop",
          "signature": "(): Boolean",
          "description": "Stop Xray core",
          "native_method": "nativeStop"
        },
        {
          "name": "getVersion",
          "signature": "(): String",
          "description": "Get Xray core version",
          "native_method": "nativeGetVersion"
        },
        {
          "name": "getStats",
          "signature": "(): String",
          "description": "Get connection statistics",
          "native_method": "nativeGetStats"
        }
      ]
    },
    "jni_implementation": {
      "header_file": "net_marfanet_xray_XrayCore.h",
      "source_file": "xray_jni.cpp",
      "required_includes": [
        "#include <jni.h>",
        "#include <string>",
        "#include <android/log.h>"
      ],
      "error_handling": {
        "exception_class": "net/marfanet/xray/XrayException",
        "log_tag": "XrayJNI",
        "log_level": "ANDROID_LOG_INFO"
      }
    },
    "configuration_bridge": {
      "input_format": "JSON",
      "validation": "JSON Schema",
      "conversion": "Kotlin -> JSON -> Xray Config",
      "error_propagation": "Exception -> Kotlin Exception"
    }
  },
  "configuration_bridge": {
    "configuration_models": {
      "XrayConfig": {
        "package": "net.marfanet.xray.config",
        "properties": [
          {
            "name": "inbounds",
            "type": "List<InboundConfig>",
            "description": "Inbound proxy configurations"
          },
          {
            "name": "outbounds",
            "type": "List<OutboundConfig>",
            "description": "Outbound proxy configurations"
          },
          {
            "name": "routing",
            "type": "RoutingConfig",
            "description": "Traffic routing rules"
          },
          {
            "name": "dns",
            "type": "DnsConfig",
            "description": "DNS configuration"
          }
        ]
      },
      "InboundConfig": {
        "properties": [
          "tag: String",
          "port: Int",
          "protocol: String",
          "settings: JsonObject"
        ]
      },
      "OutboundConfig": {
        "properties": [
          "tag: String",
          "protocol: String",
          "settings: JsonObject",
          "streamSettings: JsonObject"
        ]
      }
    },
    "conversion_logic": {
      "hiddify_to_xray": {
        "description": "Convert Hiddify configuration to Xray format",
        "steps": [
          "Parse Hiddify configuration JSON",
          "Map protocol-specific settings",
          "Generate Xray-compatible JSON",
          "Validate against Xray schema"
        ]
      },
      "protocol_mapping": {
        "vmess": "VMess protocol with UUID authentication",
        "vless": "VLess protocol with UUID authentication",
        "trojan": "Trojan protocol with password authentication",
        "shadowsocks": "Shadowsocks protocol",
        "socks": "SOCKS5 proxy protocol",
        "http": "HTTP proxy protocol"
      }
    },
    "validation": {
      "json_schema": "xray-config-schema.json",
      "required_fields": [
        "inbounds",
        "outbounds"
      ],
      "validation_rules": [
        "At least one inbound configuration required",
        "At least one outbound configuration required",
        "Valid UUID format for VMess/VLess",
        "Valid password format for Trojan"
      ]
    }
  },
  "service_integration": {
    "vpn_service_changes": {
      "class": "MarFaNetVpnService",
      "package": "net.marfanet.service",
      "extends": "VpnService",
      "modifications": [
        {
          "method": "onCreate",
          "changes": [
            "Initialize XrayCore",
            "Setup notification channel",
            "Register connection callbacks"
          ]
        },
        {
          "method": "onStartCommand",
          "changes": [
            "Parse configuration from Intent",
            "Start Xray core with configuration",
            "Establish VPN tunnel"
          ]
        },
        {
          "method": "onDestroy",
          "changes": [
            "Stop Xray core",
            "Clean up resources",
            "Cancel notifications"
          ]
        }
      ]
    },
    "tunnel_setup": {
      "tun_interface": {
        "name": "marfa0",
        "mtu": 1500,
        "addresses": [
          "10.0.0.1/24",
          "fd00:1:fd00:1:fd00:1:fd00:1/126"
        ],
        "dns_servers": [
          "8.8.8.8",
          "8.8.4.4",
          "2001:4860:4860::8888"
        ]
      },
      "routing": {
        "include_routes": [
          "0.0.0.0/0",
          "::/0"
        ],
        "exclude_routes": [
          "192.168.0.0/16",
          "10.0.0.0/8",
          "172.16.0.0/12"
        ],
        "bypass_packages": []
      }
    },
    "connection_management": {
      "connection_state": {
        "DISCONNECTED": 0,
        "CONNECTING": 1,
        "CONNECTED": 2,
        "DISCONNECTING": 3,
        "ERROR": 4
      },
      "state_transitions": [
        "DISCONNECTED -> CONNECTING: startVpn()",
        "CONNECTING -> CONNECTED: onTunnelEstablished()",
        "CONNECTED -> DISCONNECTING: stopVpn()",
        "DISCONNECTING -> DISCONNECTED: onTunnelClosed()",
        "ANY -> ERROR: onError()"
      ],
      "error_handling": [
        "Connection timeout",
        "Authentication failure",
        "Network unreachable",
        "Core initialization failure"
      ]
    }
  },
  "protocol_support": {
    "supported_protocols": {
      "vmess": {
        "name": "VMess",
        "description": "VMess protocol with various transport options",
        "url_schemes": [
          "vmess://"
        ],
        "features": [
          "UUID authentication",
          "AlterID",
          "Security modes"
        ],
        "transports": [
          "TCP",
          "WebSocket",
          "HTTP/2",
          "gRPC"
        ]
      },
      "vless": {
        "name": "VLess",
        "description": "Lightweight protocol without encryption",
        "url_schemes": [
          "vless://"
        ],
        "features": [
          "UUID authentication",
          "XTLS",
          "Reality"
        ],
        "transports": [
          "TCP",
          "WebSocket",
          "HTTP/2",
          "gRPC"
        ]
      },
      "trojan": {
        "name": "Trojan",
        "description": "Trojan protocol for censorship circumvention",
        "url_schemes": [
          "trojan://"
        ],
        "features": [
          "Password authentication",
          "TLS camouflage"
        ],
        "transports": [
          "TCP",
          "WebSocket"
        ]
      },
      "shadowsocks": {
        "name": "Shadowsocks",
        "description": "Secure proxy protocol",
        "url_schemes": [
          "ss://"
        ],
        "features": [
          "Multiple encryption methods",
          "AEAD ciphers"
        ],
        "methods": [
          "AES-256-GCM",
          "AES-128-GCM",
          "ChaCha20-Poly1305"
        ]
      }
    },
    "url_parsing": {
      "parser_class": "XrayUrlParser",
      "package": "net.marfanet.xray.parser",
      "methods": [
        {
          "name": "parseVMessUrl",
          "signature": "(url: String): VMessConfig",
          "description": "Parse VMess URL to configuration"
        },
        {
          "name": "parseVLessUrl",
          "signature": "(url: String): VLessConfig",
          "description": "Parse VLess URL to configuration"
        },
        {
          "name": "parseTrojanUrl",
          "signature": "(url: String): TrojanConfig",
          "description": "Parse Trojan URL to configuration"
        },
        {
          "name": "parseShadowsocksUrl",
          "signature": "(url: String): ShadowsocksConfig",
          "description": "Parse Shadowsocks URL to configuration"
        }
      ],
      "validation": {
        "url_format_validation": true,
        "parameter_validation": true,
        "security_validation": true,
        "coverage_target": ">=90%"
      }
    }
  },
  "migration_steps": [
    {
      "step": 1,
      "title": "Remove Sing-box Dependencies",
      "description": "Clean up existing Sing-box integration",
      "tasks": [
        "Comment out sing-box dependencies in build.gradle",
        "Remove sing-box import statements",
        "Delete sing-box JNI wrapper classes",
        "Clean build cache"
      ],
      "files_affected": [
        "app/build.gradle",
        "app/src/main/kotlin/com/hiddify/hiddify/core/",
        "app/src/main/kotlin/com/hiddify/hiddify/service/"
      ],
      "validation": "Project should compile without sing-box references"
    },
    {
      "step": 2,
      "title": "Add Xray Core Dependencies",
      "description": "Integrate Xray core into the project",
      "tasks": [
        "Add Xray core dependency to build.gradle",
        "Create jniLibs directory structure",
        "Add native library placeholders",
        "Update proguard rules"
      ],
      "files_affected": [
        "app/build.gradle",
        "app/src/main/jniLibs/",
        "app/proguard-rules.pro"
      ],
      "validation": "Project should compile with Xray dependencies"
    },
    {
      "step": 3,
      "title": "Implement Xray JNI Interface",
      "description": "Create JNI bridge for Xray core",
      "tasks": [
        "Create XrayCore Kotlin class",
        "Implement JNI native methods",
        "Add configuration bridge classes",
        "Implement error handling"
      ],
      "files_affected": [
        "app/src/main/kotlin/net/marfanet/xray/",
        "app/src/main/cpp/"
      ],
      "validation": "JNI interface should load without errors"
    },
    {
      "step": 4,
      "title": "Update VPN Service",
      "description": "Modify VPN service to use Xray core",
      "tasks": [
        "Update service lifecycle methods",
        "Implement Xray configuration loading",
        "Update tunnel establishment logic",
        "Add connection state management"
      ],
      "files_affected": [
        "app/src/main/kotlin/com/hiddify/hiddify/service/HiddifyVpnService.kt"
      ],
      "validation": "VPN service should start/stop with Xray core"
    },
    {
      "step": 5,
      "title": "Update Protocol Parsers",
      "description": "Implement Xray-compatible protocol parsers",
      "tasks": [
        "Create XrayUrlParser class",
        "Implement protocol-specific parsers",
        "Add configuration validation",
        "Update UI configuration handling"
      ],
      "files_affected": [
        "app/src/main/kotlin/net/marfanet/xray/parser/",
        "app/src/main/kotlin/com/hiddify/hiddify/ui/"
      ],
      "validation": "All supported protocols should parse correctly"
    },
    {
      "step": 6,
      "title": "Integration Testing",
      "description": "Comprehensive testing of Xray integration",
      "tasks": [
        "Unit test JNI interface",
        "Test VPN service functionality",
        "Test protocol parsing",
        "Integration test with real servers"
      ],
      "files_affected": [
        "app/src/test/",
        "app/src/androidTest/"
      ],
      "validation": "All tests should pass with >90% coverage"
    }
  ],
  "validation_tests": {
    "unit_tests": {
      "xray_core_test": {
        "class": "XrayCoreTest",
        "package": "net.marfanet.xray",
        "test_methods": [
          "testCoreInitialization",
          "testConfigurationValidation",
          "testStartStop",
          "testErrorHandling"
        ]
      },
      "url_parser_test": {
        "class": "XrayUrlParserTest",
        "package": "net.marfanet.xray.parser",
        "test_methods": [
          "testVMessUrlParsing",
          "testVLessUrlParsing",
          "testTrojanUrlParsing",
          "testShadowsocksUrlParsing",
          "testInvalidUrlHandling"
        ],
        "coverage_target": ">=90%"
      }
    },
    "integration_tests": {
      "vpn_service_test": {
        "class": "VpnServiceIntegrationTest",
        "package": "net.marfanet.service",
        "test_scenarios": [
          "Service lifecycle",
          "Tunnel establishment",
          "Connection state changes",
          "Error recovery"
        ]
      },
      "e2e_connectivity_test": {
        "class": "ConnectivityTest",
        "package": "net.marfanet.e2e",
        "test_scenarios": [
          "Connect to test servers",
          "Traffic routing verification",
          "DNS resolution test",
          "Performance benchmarks"
        ]
      }
    },
    "performance_tests": {
      "memory_usage": {
        "max_heap_size": "256MB",
        "memory_leak_detection": true
      },
      "connection_speed": {
        "handshake_timeout": "10s",
        "throughput_target": ">50Mbps"
      },
      "battery_usage": {
        "idle_consumption": "<5mA",
        "active_consumption": "<50mA"
      }
    }
  },
  "performance_considerations": {
    "optimization_targets": {
      "startup_time": {
        "cold_start": "<3s",
        "warm_start": "<1s",
        "measurements": "Application.onCreate to VPN ready"
      },
      "memory_usage": {
        "baseline": "<128MB",
        "peak": "<256MB",
        "gc_efficiency": ">95%"
      },
      "network_performance": {
        "connection_establishment": "<5s",
        "throughput_overhead": "<10%",
        "latency_overhead": "<50ms"
      }
    },
    "optimization_strategies": {
      "code_optimization": [
        "Enable R8 full mode",
        "Optimize ProGuard rules",
        "Remove unused dependencies",
        "Use Kotlin coroutines for async operations"
      ],
      "native_optimization": [
        "Optimize JNI call frequency",
        "Use direct ByteBuffers",
        "Minimize object allocations",
        "Cache native method IDs"
      ],
      "network_optimization": [
        "Enable Happy Eyeballs",
        "Implement connection pooling",
        "Use persistent connections",
        "Optimize buffer sizes"
      ]
    },
    "monitoring": {
      "metrics": [
        "CPU usage",
        "Memory consumption",
        "Network throughput",
        "Battery drain",
        "Connection stability"
      ],
      "tools": [
        "Android Studio Profiler",
        "StrictMode",
        "Custom performance logger",
        "Firebase Performance"
      ]
    }
  },
  "security_requirements": {
    "security_requirements": {
      "data_protection": [
        "Encrypt sensitive configuration data",
        "Use Android Keystore for key management",
        "Clear sensitive data from memory",
        "Prevent configuration leakage in logs"
      ],
      "network_security": [
        "Validate server certificates",
        "Use secure TLS versions (1.2+)",
        "Implement certificate pinning",
        "Prevent DNS leaks"
      ],
      "application_security": [
        "Enable code obfuscation",
        "Prevent reverse engineering",
        "Validate all user inputs",
        "Implement anti-tampering measures"
      ]
    },
    "security_validations": {
      "static_analysis": [
        "SAST tools integration",
        "Dependency vulnerability scan",
        "Code quality checks",
        "License compliance"
      ],
      "dynamic_analysis": [
        "Runtime security testing",
        "Network traffic analysis",
        "Memory dump analysis",
        "Penetration testing"
      ]
    },
    "compliance": {
      "privacy": [
        "No user data collection",
        "Local-only configuration storage",
        "Privacy policy compliance",
        "GDPR compliance"
      ],
      "security_standards": [
        "OWASP Mobile Top 10",
        "Android Security Guidelines",
        "Industry best practices"
      ]
    }
  }
}