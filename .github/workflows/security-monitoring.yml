name: MarFaNet Security Monitoring

on:
  schedule:
    # Run security scans daily at 02:00 UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false

jobs:
  cve-monitoring:
    name: CVE Monitoring & Patch Pipeline
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: OWASP Dependency Check
      run: ./gradlew dependencyCheckAnalyze
      
    - name: Check for Critical/High CVEs
      id: cve-check
      run: |
        if [ -f app/build/reports/dependency-check-report.json ]; then
          CRITICAL=$(jq '[.vulnerabilities[] | select(.severity == "CRITICAL")] | length' app/build/reports/dependency-check-report.json)
          HIGH=$(jq '[.vulnerabilities[] | select(.severity == "HIGH")] | length' app/build/reports/dependency-check-report.json)
          
          echo "critical_count=$CRITICAL" >> $GITHUB_OUTPUT
          echo "high_count=$HIGH" >> $GITHUB_OUTPUT
          
          if [ $((CRITICAL + HIGH)) -gt 0 ]; then
            echo "security_alert=true" >> $GITHUB_OUTPUT
            echo "üö® Found $CRITICAL Critical and $HIGH High severity vulnerabilities"
          else
            echo "security_alert=false" >> $GITHUB_OUTPUT
            echo "‚úÖ No Critical or High severity vulnerabilities found"
          fi
        fi
        
    - name: Create Security Alert Issue
      if: steps.cve-check.outputs.security_alert == 'true'
      uses: actions/github-script@v6
      with:
        script: |
          const critical = ${{ steps.cve-check.outputs.critical_count }};
          const high = ${{ steps.cve-check.outputs.high_count }};
          
          const issueBody = `
          # üö® Security Alert: Critical/High CVEs Detected
          
          **Alert Date**: ${new Date().toISOString()}
          **Critical CVEs**: ${critical}
          **High CVEs**: ${high}
          
          ## Required Actions (48h SLA)
          
          - [ ] Review vulnerability report: [dependency-check-report.html](../blob/main/app/build/reports/dependency-check-report.html)
          - [ ] Assess impact on MarFaNet components
          - [ ] Identify affected dependencies
          - [ ] Plan hotfix strategy
          - [ ] Implement security patches
          - [ ] Deploy hotfix as v1.0.x patch
          
          ## Priority Matrix
          - **Critical CVEs**: Immediate hotfix required (‚â§24h)
          - **High CVEs**: Hotfix required within 48h
          
          **Auto-generated by Security Monitoring Pipeline**
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üö® Security Alert: ${critical + high} Critical/High CVEs Detected`,
            body: issueBody,
            labels: ['security', 'critical', 'hotfix-required']
          });
          
    - name: Upload Security Reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-reports-${{ github.run_number }}
        path: |
          app/build/reports/dependency-check-report.*
          
    - name: Notify Security Team
      if: steps.cve-check.outputs.security_alert == 'true'
      run: |
        echo "üîî Security team notification would be sent here"
        echo "Critical: ${{ steps.cve-check.outputs.critical_count }}"
        echo "High: ${{ steps.cve-check.outputs.high_count }}"

  xray-version-monitor:
    name: Monitor Xray Core Updates
    runs-on: ubuntu-latest
    
    steps:
    - name: Check Latest Xray Release
      id: xray-check
      run: |
        LATEST_VERSION=$(curl -s https://api.github.com/repos/XTLS/Xray-core/releases/latest | jq -r .tag_name)
        CURRENT_VERSION="v1.8.8" # Update this when we upgrade
        
        echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        if [ "$LATEST_VERSION" != "$CURRENT_VERSION" ]; then
          echo "update_available=true" >> $GITHUB_OUTPUT
          echo "üì¶ Xray core update available: $CURRENT_VERSION ‚Üí $LATEST_VERSION"
        else
          echo "update_available=false" >> $GITHUB_OUTPUT
          echo "‚úÖ Xray core is up to date: $CURRENT_VERSION"
        fi
        
    - name: Create Xray Update Issue
      if: steps.xray-check.outputs.update_available == 'true'
      uses: actions/github-script@v6
      with:
        script: |
          const latest = '${{ steps.xray-check.outputs.latest_version }}';
          const current = '${{ steps.xray-check.outputs.current_version }}';
          
          const issueBody = `
          # üì¶ Xray Core Update Available
          
          **Current Version**: ${current}
          **Latest Version**: ${latest}
          **Update Date**: ${new Date().toISOString()}
          
          ## Update Checklist
          
          - [ ] Review [Xray changelog](https://github.com/XTLS/Xray-core/releases/tag/${latest})
          - [ ] Check for breaking changes
          - [ ] Update native library binaries
          - [ ] Test with current configurations
          - [ ] Verify performance benchmarks
          - [ ] Update version in build configuration
          - [ ] Run full test suite
          - [ ] Plan deployment strategy
          
          ## Priority Assessment
          - Check for security fixes in release notes
          - Evaluate performance improvements
          - Assess compatibility with current configurations
          
          **Auto-generated by Security Monitoring Pipeline**
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üì¶ Xray Core Update: ${current} ‚Üí ${latest}`,
            body: issueBody,
            labels: ['enhancement', 'xray-update', 'dependencies']
          });

  security-audit:
    name: Comprehensive Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Run Security Linting
      run: |
        ./gradlew lint
        ./gradlew detekt
        
    - name: Check for Hardcoded Secrets
      run: |
        echo "üîç Scanning for hardcoded secrets..."
        # Look for potential hardcoded credentials
        if grep -r "password.*=" app/src/ --include="*.kt" --include="*.java"; then
          echo "‚ö†Ô∏è  Potential hardcoded passwords found"
          exit 1
        fi
        
        if grep -r "api.*key.*=" app/src/ --include="*.kt" --include="*.java"; then
          echo "‚ö†Ô∏è  Potential hardcoded API keys found"
          exit 1
        fi
        
        echo "‚úÖ No hardcoded secrets detected"
        
    - name: Permission Analysis
      run: |
        echo "üîç Analyzing Android permissions..."
        if [ -f app/src/main/AndroidManifest.xml ]; then
          DANGEROUS_PERMS=$(grep -c "android.permission.*DANGEROUS" app/src/main/AndroidManifest.xml || echo "0")
          echo "Dangerous permissions count: $DANGEROUS_PERMS"
          
          # List all permissions for review
          echo "üìã All requested permissions:"
          grep "uses-permission" app/src/main/AndroidManifest.xml || echo "No permissions found"
        fi
        
    - name: Network Security Config Check
      run: |
        echo "üîç Checking network security configuration..."
        if [ -f app/src/main/res/xml/network_security_config.xml ]; then
          echo "‚úÖ Network security config found"
          cat app/src/main/res/xml/network_security_config.xml
        else
          echo "‚ö†Ô∏è  Consider adding network security configuration"
        fi