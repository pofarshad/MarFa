name: AutoFixBot Real CI Test

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of failure to simulate'
        required: true
        default: 'gradle_version'
        type: choice
        options:
        - gradle_version
        - missing_permission
        - dependency_conflict
        - lint_failure

jobs:
  test-autofix-capabilities:
    name: Test AutoFixBot Auto-Repair
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Simulate Real CI Problems
      run: |
        echo "🧪 Testing AutoFixBot with real CI failure: ${{ github.event.inputs.test_type }}"
        
        case "${{ github.event.inputs.test_type }}" in
          "gradle_version")
            echo "❌ Simulating Gradle version conflict..."
            echo "gradle.version.incompatible=true" >> gradle.properties
            ./gradlew --version || exit 1
            ;;
          "missing_permission")
            echo "❌ Simulating Android permission missing..."
            echo "Missing INTERNET permission in AndroidManifest.xml" 
            exit 1
            ;;
          "dependency_conflict")
            echo "❌ Simulating dependency version conflict..."
            echo "Dependency conflict: androidx.core versions mismatch"
            exit 1
            ;;
          "lint_failure")
            echo "❌ Simulating lint failures..."
            echo "Lint check failed: unused imports detected"
            exit 1
            ;;
        esac
        
    - name: Call AutoFixBot on Failure
      if: failure()
      run: |
        echo "📡 Calling AutoFixBot to fix the problem..."
        
        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
          "${{ secrets.AUTOFIXBOT_URL }}" \
          -H "Content-Type: application/json" \
          -H "X-GitHub-Delivery: test-${{ github.run_id }}" \
          -H "X-GitHub-Event: workflow_run" \
          -H "X-Hub-Signature-256: sha256=$(echo -n '{}' | openssl dgst -sha256 -hmac '${{ secrets.GITHUB_WEBHOOK_SECRET }}' | cut -d' ' -f2)" \
          -d '{
            "action": "completed",
            "workflow_run": {
              "id": ${{ github.run_id }},
              "name": "${{ github.workflow }}",
              "conclusion": "failure",
              "run_number": ${{ github.run_number }},
              "head_branch": "${{ github.ref_name }}",
              "repository": {
                "owner": {"login": "${{ github.repository_owner }}"},
                "name": "${{ github.event.repository.name }}",
                "full_name": "${{ github.repository }}"
              },
              "head_commit": {
                "message": "Test AutoFixBot repair capabilities"
              }
            },
            "installation": {"id": 12345}
          }')
          
        HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
        BODY=$(echo "$RESPONSE" | head -n -1)
        
        echo "AutoFixBot Response Code: $HTTP_CODE"
        echo "AutoFixBot Response: $BODY"
        
        if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "204" ]; then
          echo "✅ AutoFixBot successfully received the failure notification!"
        else
          echo "❌ AutoFixBot webhook failed with code: $HTTP_CODE"
        fi
        
    - name: AutoFixBot Test Summary
      if: always()
      run: |
        echo "## 🤖 AutoFixBot Real CI Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Test Type**: ${{ github.event.inputs.test_type }}" >> $GITHUB_STEP_SUMMARY
        echo "**Purpose**: Test AutoFixBot's ability to detect and fix real CI problems" >> $GITHUB_STEP_SUMMARY
        echo "**Expected**: AutoFixBot should analyze the failure and create a fix" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Next Steps**: Check AutoFixBot logs and watch for automatic PR creation" >> $GITHUB_STEP_SUMMARY