MarFaNet with Latest Stable Xray Core –‑ Deliver Complete Source Code (zip) – No APK build inside Replit

1 – Context & Goal

You are an expert Kotlin/Android engineer working inside Replit AI, where the full Android tool‑chain (AGP, NDK, emulators) is unavailable. Your objective is therefore source‑level refactoring only:

Produce a fully updated, build‑ready source tree that satisfies every technical requirement listed below. After downloading, a downstream Android developer must be able to open the project in Android Studio (Hedgehog, Kotlin ≥ 1.9, AGP ≥ 8, Gradle 8), drop in pre‑built native libraries, and click Build → Generate APK with zero further edits, errors, or warnings.

Source to clone: https://github.com/hiddify/hiddify-app/releases/tag/v2.5.7

2 – Comprehensive Requirement Matrix (Tasks 1‑14)

 # 

 Requirement 

 How to fulfil inside Replit

 1 

Replace Sing‑box with latest stable Xray core

Remove Sing‑box JNI & Gradle artifacts. Create ABI‑specific src/main/jniLibs/… folders with README placeholders for libxray.so. Update Gradle to fetch com.github.2dust:xray-core:latest.release as providedRuntime.

 2 

Update libraries & code paths impacted by core swap

Search & refactor all singbox‑dependent packages. Adapt config models, service bindings, Foreground­Service calls. Document every changed symbol in CHANGELOG.md.

 3 

Integrate gfw‑knocker (default enabled)

Add Kotlin module gfwknocker exposing Knocker.start(config) / stop(). Provide JNI stubs + placeholder .so drop‑points. Wire auto‑start in VPN service.

 4 

Remove standalone WARP / WARP+ toggles

Delete WARP‑specific Preferences/Fragments. Update subscription parser to accept links containing warp= but omit special UI.

 5 

Re‑brand to MarFaNet

Global rename Hiddify→MarFaNet; change applicationId to net.marfanet.android; update launcher icons (provide placeholder SVG spec).

 6 

Full code audit & bug fix

Enable lint, detekt, ktlint, static‑analysis, owasp‑dependency‑check. Refactor until all tasks pass with 0 issues. Document fixes in TECH_REPORT.md.

 7 

Support full Xray URL/link scheme

Implement XrayLinkParser.kt (coverage ≥ 90 % via JUnit). Accept VMess, VLess, Reality, Trojan‑Go, etc.

 8 

Update infrastructure & protocols

Extend data models/UI to expose every protocol supported by Xray. Add JSON schema validation tests.

 9 

General performance optimisation

Refactor to Kotlin coroutines / Flow where beneficial; enable R8‑full‑mode; make StrictMode pass. Provide before/after size & method‑count stats in PERF_REPORT.md.

 10

Improve connection speed

Add configurable TCP & TLS handshake timeouts, enable Happy‑Eyeballs, pre‑resolve DNS. Document tunables in docs/performance.md.

 11

Eliminate random disconnects

Implement ConnectionSupervisor with watchdog coroutine, exponential back‑off, and Doze‑mode awareness. Unit‑test reconnection logic.

 12

Bundle Iran‑routing rules & auto‑update daily

WorkManager job fetches https://raw.githubusercontent.com/chocolate4u/Iran-v2ray-rules/main/iran.dat, saves to filesDir/rules/, triggers core reload.

 13

Ping engine & lowest‑latency auto‑connect

LatencyScanner.kt performs concurrent ICMP/TCP pings, writes RTT to Room DB; adapter sorts nodes. Include 50‑node integration test.

 14

Android 9 → latest compatibility

Bump compileSdk/targetSdk=34, use Scoped Storage, Foreground Service notification channels, JobScheduler fallback for ≤ API28. Provide README_BUILD.md with version matrix.

3 – Detailed Replit‑Friendly Workflow

Clone upstream repo into /workspace.

Create a clean git branch marfanet-refactor.

Apply tasks 1‑14 logically, committing after each requirement. Commit messages: feat(core): replace singbox with xray, etc.

Run:

./gradlew lint detekt ktlintCheck testDebugUnitTest

The command must exit 0.

Zip project root (excluding /.git, build outputs):zip -r marfanet-src.zip hiddify-app/

Create directory patches/ and export patch series:git format-patch origin/main --output-directory patches

Attach marfanet-src.zip, patches/*.patch, and the following docs:

README_BUILD.md – how to drop native libs & build APK

CHANGELOG.md – user‑visible changes

TECH_REPORT.md – list of bugs fixed & static‑analysis results

PERF_REPORT.md – APK size, method‑count, perf metrics (pre‑vs‑post)

4 – Deliverables Expected FROM Replit AI

Asset

Description

marfanet-src.zip

Fully refactored source code (no native binaries, no build artefacts).

patches/

Git patch series matching each requirement.

Docs

README_BUILD.md, CHANGELOG.md, TECH_REPORT.md, PERF_REPORT.md.

Important: Replit MUST return the above as downloadable attachments/links. Do NOT attempt to assemble or run APKs inside Replit.

5 – Acceptance Criteria

./gradlew lint detekt ktlintCheck testDebugUnitTest ⇒ exit 0.

Static analysis: no Critical/High findings.

Project opens in Android Studio Hedgehog and Build → APK succeeds after native libs dropped.

All functional tests (link parser, latency scanner, reconnection watchdog) pass.

No missing references or resource ID errors.

If Replit lacks capability for a step, write a clear TODO in README_BUILD.md explaining downstream manual action (e.g., “Add arm64-v8a/libxray.so here”).

6 – Completion Definition

The task is complete when:

All 14 requirements are addressed in code & docs.

Deliverables (zip, patches, docs) are attached.

No unresolved TODO/FIXME remains in source.

Execute with engineering rigour; every change must be traceable, tested, and documented. Your work ends when the zipped, refactored source tree—ready for one‑click APK build—has been delivered.