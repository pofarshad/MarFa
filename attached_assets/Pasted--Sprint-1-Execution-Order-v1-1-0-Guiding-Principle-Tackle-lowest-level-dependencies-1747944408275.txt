# **Sprint 1 Execution Order – v1.1.0**

> **Guiding Principle:** Tackle lowest‑level dependencies first (tooling) so that feature branches compile cleanly, then proceed in parallel streams to maximise developer bandwidth.

---

## 1 • Recommended Sequencing

| Phase                  | Task IDs                                                                      | Rationale                                                                                                       |
| ---------------------- | ----------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------- |
| **Phase 0**            | **TOOL‑1** (AGP 9 + Kotlin 2.0 upgrade)                                       | Unblocks Compose 2.0, K2 classes, WireGuard JNI build settings. Must be stable before any other feature merges. |
| **Phase 1**            | **STU‑1 → STU‑3** (Figma, Room schema, Compose selector)                      | UI/DB work independent of WireGuard; provides early deliverable for QA.                                         |
| **Phase 1 (parallel)** | **WG‑1 + WG‑2** (cross‑compile WG, JNI bridge)                                | Runs in parallel to Split‑Tunnelling UI; compile errors will surface quickly after TOOL‑1 merge.                |
| **Phase 2**            | **RSO‑1 → RSO‑3** (overlay permission, polling, UI)                           | Requires Compose upgrade; safe once TOOL‑1 committed.                                                           |
| **Phase 3**            | **STU‑4** (integration into VPNService) & **WG‑3, WG‑4** (toggle + benchmark) | Tie UI + engine into service; collect perf data.                                                                |
| **Phase 4**            | **CMP‑1** (HomeScreen Compose migration)                                      | Least cross‑cutting; can slip if earlier tasks overrun.                                                         |

---

## 2 • Daily Deliverables (Gantt)

```
Day 1   TOOL‑1  WG‑1   STU‑1
Day 2   WG‑2    STU‑2  WG‑1 (finish)
Day 3   STU‑3   RSO‑1  RSO‑2
Day 4   TOOL‑1 merge; CI green; start STU‑4
Day 5   WG‑3   RSO‑3  CMP‑1 (start)
Day 6   WG‑4 benchmarks; CMP‑1
Day 7   QA regression; fix
Day 8   Demo APK v1.1.0‑alpha1
```

---

## 3 • Sprint Goal Checkpoints

| Date       | Milestone                                                     | KPI                        |
| ---------- | ------------------------------------------------------------- | -------------------------- |
| Mid‑Sprint | WG POC connects; Split‑Tunnelling selector functional         | RTT & throughput logs      |
| End        | APK `v1.1.0‑alpha1` builds; CI green; coverage ≥90 % new code | Firebase Test Lab run pass |

---

## 4 • Action: Start with TOOL‑1

1. **Branch** `tooling/agp9-kotlin2`.
2. Update `gradle-wrapper.properties` → Gradle 8.6‑rc.
3. Bump `plugins { id 'com.android.application' version '9.0.0-alpha01' }`.
4. Set Kotlin `plugin` version `2.0.0-Beta3` in `libs.versions.toml`.
5. Push PR → ensure detekt/lint zero new warnings ➜ **merge**.

Once TOOL‑1 merged, green‑light parallel streams. Feel free to re‑prioritise if resource constraints demand.
